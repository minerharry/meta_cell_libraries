from typing import Dict, List
import numpy as np


#NOTE: there are multiple ways to get the overlap between a binary array and a labeledmap. the two that come to mind
# are multiply with an array of 0,1 (bool), which is the simplest, and bitwise and with an array of (0,2^(N-1)) where 
# N is the number of bits in the integer, which should be the fastest. It turns out that they are relatively similar - 
# multiply is about twice as slow (27 us vs 12.6 us for 100x100 16-bit arrays) when starting with a binary and 0/maxvalue arrays respecitively.
# However, usually you start with the binary array, and converting to the inversion map is time consuming (about 40 uS for 100x100 16-bit array).
# If a single label needs to be compared to a lot of maps, it might be useful to precompute the inversion map. However, 
# unless the tracker's memory is going to be very long, that's probably not useful.



def get_labeled_overlap_areas(bitmap:np.ndarray,labeledmap:np.ndarray):
    """returns 2xN array [[label,area],...] of the area of overlap between the bitmap and the labeledmap"""
    overlap = bitmap * labeledmap
    return np.array([(label,np.sum(overlap == label)) for label in np.unique(overlap)])

def get_labeled_overlap(bitmap:np.ndarray,labeledmap:np.ndarray):
    """Returns the list of labels in the labeled map that overlap the bitmap"""
    return np.unique(bitmap * labeledmap)


def get_pairwise_labeled_overlaps(labeled1:np.ndarray,labeled2:np.ndarray,zero=False):
    """returns a dictionary of {label1:[label2,...]}. The if zero=True, the zero label is included."""
    res:Dict[int,List[int]] = {}
    for label in np.unique(labeled1):
        if label == 0 and not zero:
            continue
        map = labeled1 == label
        overlapped = get_labeled_overlap(map,labeled2)
        res[label] = overlapped
    return res

def get_pairwise_labeled_overlap_areas(labeled1:np.ndarray,labeled2:np.ndarray,zero=False):
    """returns a dictionary of {label1:areas} where areas is the 2xN array 
    [[label2,area],...] as generated by get_labeled_overlap_areas.
    if zero=True, the zero label is included"""
    res:Dict[int,np.ndarray] = {}
    for label in np.unique(labeled1):
        if label == 0 and not zero:
            continue
        map = labeled1 == label
        overlapped = get_labeled_overlap_areas(map,labeled2)
        res[label] = overlapped
    return res

